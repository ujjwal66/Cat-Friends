{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","Component","App","onSearchChange","event","searchfeid","target","value","fetch","then","response","json","users","filterdRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gNAiBeA,EAdJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GAEvB,OAEK,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,eACrB,6BACC,4BAAKF,GACL,2BAAIC,MCcAK,EAtBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAChB,OACO,6BAEFA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACA,kBAAC,EAAD,CACAC,IAAKD,EACJR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCETW,EAbC,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC9B,OACC,yBAAKX,UAAU,OACT,2BACAA,UAAU,mCACVY,KAAK,SACLC,YAAY,cACZC,SAAUH,MCEHI,EATF,SAACC,GACb,OACK,yBAAKC,MAAO,CAAEC,SAAU,SACxBC,OAAQ,gBAAgBC,OAAQ,UAC9BJ,EAAMK,WCgBCC,E,kDAnBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAM,CACVC,UAAU,GAHM,E,8DAQDC,EAAOC,GACtBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACN,8CAEDG,KAAKX,MAAMK,a,GAjBSQ,aCwCbC,G,wDAlCd,aAAc,IAAD,8BACZ,gBAYDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,WAAYD,EAAME,OAAOC,SAZxC,EAAKZ,MAAM,CACVnB,OAAQ,GACR6B,WAAY,IAJD,E,gEAQU,IAAD,OAClBG,MAAM,kEACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAACxB,OAAOoC,S,+BAK/B,IAAD,OACEC,EAAed,KAAKJ,MAAMnB,OAAOsC,QAAO,SAAAtC,GAC1C,OAAOA,EAAOP,KAAK8C,cAAcC,SAAS,EAAKrB,MAAMU,WAAWU,kBAEtE,OACF,yBAAK3C,UAAU,MACd,wBAAIA,UAAU,MAAd,cACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACM,kBAAC,EAAD,CAAU3B,OAAQqC,W,GA3BRZ,cCKEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.f2b499b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nconst Card=({name,email,id})=>{\r\n\t//const{name,email,id}=props\r\n\treturn(\r\n\r\n      <div className='back dib br3 pa3 ma2 grow bw2 shadow-5 dimension'> \r\n          <img alt=\"photos\" src={`https://robohash.org/${id}?set=set4`} />\r\n          <div>\r\n           <h2>{name}</h2> \r\n           <p>{email}</p>\r\n          </div>\r\n       </div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=>{\r\n\treturn(\r\n        <div>\r\n      {  \r\n      robots.map((user,i)=>{\r\n      return (\r\n      <Card \r\n      key={i}\r\n       id={robots[i].id}\r\n       name={robots[i].name}\r\n       email={robots[i].email} \r\n       />\r\n       );\r\n\t})\r\n  }\r\n        </div>\r\n\r\n\t\t);\r\n\r\n\t\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchfield, searchChange})=>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n        <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='Search Cats'\r\n        onChange={searchChange} />\r\n\t\t</div>\r\n\t\t);\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n      <div style={{ overflow: 'scroll', \r\n      border: '5px solid red',height: '800px'}}>\r\n       {props.children}\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){ //to access props\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n//new life cycle method in 16\r\n\r\ncomponentDidCatch(error, errorInfo) {\r\n   this.setState({hasError:true})\r\n}\r\n\r\nrender(){\r\n\tif(this.state.hasError){\r\n\t\treturn <h1>Failed to Load</h1>\r\n\t}\r\n\treturn this.props.children\r\n}\r\n}\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper();//calls the constructor of the component\r\n\t\tthis.state={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfeid: ''\r\n\t\t}\r\n\t}\r\n    \r\n    componentDidMount(){\r\n    \tfetch('http://www.json-generator.com/api/json/get/ceUuviSRHC?indent=2')\r\n    \t.then(response=> response.json())\r\n    \t.then(users=> this.setState({robots:users}));\r\n    }\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfeid: event.target.value})\r\n\t}\r\n\trender(){\r\n\t\t   const filterdRobots= this.state.robots.filter(robots =>{\r\n       \t return robots.name.toLowerCase().includes(this.state.searchfeid.toLowerCase());\r\n       })\r\n\t  return(\r\n\t<div className='tc'>\r\n\t <h1 className='f1'>CatFriends</h1>\t\r\n\t <SearchBox searchChange={this.onSearchChange} />\r\n\t <Scroll>\r\n\t <ErrorBoundary>\r\n        <CardList robots={filterdRobots} />\r\n\t </ErrorBoundary>\r\n\t </Scroll>\r\n    </div>\r\n\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));    \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}